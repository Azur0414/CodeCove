package kr.or.ddit.member.service;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.blog.vo.BlogCateVO;
import kr.or.ddit.blog.vo.CreateBlogVO;
import kr.or.ddit.mapper.member.LoginMapper;
import kr.or.ddit.mapper.member.ProfileMapper;
import kr.or.ddit.member.vo.MemberRole;
import kr.or.ddit.member.vo.MemberVO;

@Service
public class MemberServiceImpl implements IMemberService {

	@Inject
	private LoginMapper loginMapper;

	@Inject
	private ProfileMapper profileMapper;

	@Override
	public ServiceResult idCheck(String memId) {
		ServiceResult result = null;
		MemberVO member = loginMapper.idCheck(memId);
		if (member != null) {
			result = ServiceResult.EXIST;
		} else {
			result = ServiceResult.NOTEXIST;
		}
		return result;
	}

	@Override
	public ServiceResult signup(HttpServletRequest req, MemberVO memberVO) {
		ServiceResult result = null;

//		String uploadPath = req.getServletContext().getRealPath("/resources/profile");
//		File file = new File(uploadPath);
//		if (!file.exists()) {
//			file.mkdirs();
//		}
//
//		String profileImg = "";
//		try {
//			MultipartFile profileImgFile = memberVO.getImgFile();
//			if (profileImgFile.getOriginalFilename() != null && !profileImgFile.getOriginalFilename().equals("")) {
//				String fileName = UUID.randomUUID().toString();
//				fileName += "_" + profileImgFile.getOriginalFilename();
//				uploadPath += "/" + fileName;
//				profileImgFile.transferTo(new File(uploadPath));
//				profileImg = "/resources/profile/" + fileName;
//			}
//			memberVO.setMemProfile(profileImg);
//		} catch (IllegalStateException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}

		int status = loginMapper.signup(memberVO);
		
		MemberRole memberRole = new MemberRole();
		memberRole.setMemId(memberVO.getMemId());
		memberRole.setRoleCode("ROLE_USER");
		loginMapper.signupRole(memberRole);
		
		if (status > 0) {
			result = ServiceResult.OK;
		} else {
			result = ServiceResult.FAIL;
		}
		return result;
	}

	@Override
	public MemberVO loginCheck(MemberVO member) {
		return loginMapper.loginCheck(member);
	}

	@Override
	public String idForgetProcess(MemberVO member) {
		return loginMapper.idForgetProcess(member);
	}

	@Override
	public String pwForgetProcess(MemberVO member) {
		return loginMapper.pwForgetProcess(member);
	}

	@Override
	public MemberVO selectMember(MemberVO sessionMember) {
		return profileMapper.selectMember(sessionMember);
	}

	@Override
	public ServiceResult profileUpdate(HttpServletRequest req, MemberVO memberVO) {
		ServiceResult result = null;

		String uploadPath = req.getServletContext().getRealPath("/resources/profile");
		File file = new File(uploadPath);
		if (!file.exists()) {
			file.mkdirs();
		}

		String profileImg = "";
		try {
			MultipartFile profileImgFile = memberVO.getImgFile();
			if (profileImgFile.getOriginalFilename() != null && !profileImgFile.getOriginalFilename().equals("")) {
				String fileName = UUID.randomUUID().toString();
				fileName += "_" + profileImgFile.getOriginalFilename();
				uploadPath += "/" + fileName;
				profileImgFile.transferTo(new File(uploadPath));
				profileImg = "/resources/profile/" + fileName;
			}
			memberVO.setMemProfile(profileImg);
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		int status = profileMapper.profileUpdate(memberVO);
		if (status > 0) {
			result = ServiceResult.OK;
		} else {
			result = ServiceResult.FAIL;
		}
		return result;
	}
	
	// 회원가입시 블로그 생성
	@Override
	public void createBlog(CreateBlogVO createBlog) {
		loginMapper.createBlog(createBlog);
	}

	@Override
	public void createBlogCategory(BlogCateVO blogCate) {
		loginMapper.createBlogCategory(blogCate);
	}
}
