package kr.or.ddit.member.controller;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken.Payload;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdTokenVerifier;
import com.google.api.client.googleapis.util.Utils;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.blog.vo.BlogCateVO;
import kr.or.ddit.blog.vo.CreateBlogVO;
import kr.or.ddit.member.service.IMemberService;
import kr.or.ddit.member.vo.MemberVO;

@Controller
public class LoginController {

	@Inject
	private IMemberService memberService;

	@RequestMapping(value = "/login.do", method = RequestMethod.GET)
	public String login(@RequestParam(name = "stat", required = false, defaultValue = "0") int stat, Model model) {
		if (stat == 1) {
			model.addAttribute("message", "회원가입을 완료하였습니다!");
		}
		model.addAttribute("bodyText", "login-page");
		return "member/login";
	}

	// 로그인 테스트
	@RequestMapping(value = "/loginSuccess.do", method = RequestMethod.GET)
	public String loginSucces() {
		return "member/loginSuccess";
	}
	// 테스트
	@RequestMapping(value = "/google", method = RequestMethod.GET)
	public String google() {
		return "member/google";
	}

	@RequestMapping(value = "/loginCheck.do", method = RequestMethod.POST)
	public String loginCheck(HttpServletRequest req, MemberVO member, Model model) {
		String goPage = "";
		Map<String, String> errors = new HashMap<String, String>();
		if (StringUtils.isBlank(member.getMemId())) {
			errors.put("memId", "아이디를 입력해주세요!");
		}
		if (StringUtils.isBlank(member.getMemPass())) {
			errors.put("memPass", "비밀번호를 입력해주세요!");
		}

		if (errors.size() > 0) {
			model.addAttribute("errors", errors);
			model.addAttribute("member", member);
			model.addAttribute("bodyText", "login-page");
			goPage = "member/login";
		} else {
			MemberVO memberVO = memberService.loginCheck(member);
			if (memberVO != null) { // 로그인 성공
				// 로그인 성공 후, 세션 처리
				HttpSession session = req.getSession();
				session.setAttribute("SessionInfo", memberVO);
				goPage = "redirect:/loginSuccess.do";
			} else {
				model.addAttribute("message", "서버에러, 로그인 정보를 정확하게 입력해주세요!");
				model.addAttribute("member", member);
				model.addAttribute("bodyText", "login-page");
				goPage = "member/login";
			}
		}
		return goPage;
	}

	@RequestMapping(value = "/register.do", method = RequestMethod.GET)
	public String register(Model model) {
		model.addAttribute("bodyText", "register-page");
		return "member/register";
	}

	@RequestMapping(value = "/idCheck.do", method = RequestMethod.POST)
	public ResponseEntity<ServiceResult> idCheck(String memId) {
		ServiceResult result = memberService.idCheck(memId);
		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
	}

	@RequestMapping(value = "/signup.do", method = RequestMethod.POST)
	public String signup(HttpServletRequest req, MemberVO memberVO, Model model) {
		String goPage = "";

		Map<String, String> errors = new HashMap<String, String>();
		if (StringUtils.isBlank(memberVO.getMemId())) {
			errors.put("memId", "아이디를 입력해주세요!");
		}
		if (StringUtils.isBlank(memberVO.getMemPass())) {
			errors.put("memPass", "비밀번호를 입력해주세요!");
		}
		if (StringUtils.isBlank(memberVO.getMemName())) {
			errors.put("memName", "이름을 입력해주세요!");
		}

		if (errors.size() > 0) { // 에러가 발생!
			model.addAttribute("bodyText", "register-page");
			model.addAttribute("errors", errors);
			model.addAttribute("member", memberVO);
			goPage = "member/register";
		} else { // 정상적으로 처리
			ServiceResult result = memberService.signup(req, memberVO); 
			
			// 회원가입시 블로그 생성
			CreateBlogVO createBlog = new CreateBlogVO();
			createBlog.setBloggerId(memberVO.getMemId());
			memberService.createBlog(createBlog);
			BlogCateVO blogCate = new BlogCateVO();
			blogCate.setBlogId(createBlog.getBlogId());
			memberService.createBlogCategory(blogCate);
			
			if (result.equals(ServiceResult.OK)) {
				goPage = "redirect:/login.do?stat=1";
			} else {
				model.addAttribute("bodyText", "register-page");
				model.addAttribute("message", "서버에러, 다시 시도해주세요!");
				model.addAttribute("member", memberVO);
				goPage = "member/register";
			}
		}
		return goPage;
	}

	@RequestMapping(value = "/forget.do", method = RequestMethod.GET)
	public String loginForgetIdAndPw(Model model) {
		model.addAttribute("bodyText", "login-page");
		return "member/forget";
	}

	@RequestMapping(value = "/idForget.do", method = RequestMethod.POST)
	public ResponseEntity<String> idForgetProcess(MemberVO member) {
		String memId = memberService.idForgetProcess(member);
		return new ResponseEntity<String>(memId, HttpStatus.OK);

	}

	@RequestMapping(value = "/pwForget.do", method = RequestMethod.POST)
	public ResponseEntity<String> pwForgetProcess(MemberVO member) {
		String memPass = memberService.pwForgetProcess(member);
		return new ResponseEntity<String>(memPass, HttpStatus.OK);
	}

}
